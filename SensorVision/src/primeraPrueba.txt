/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       Melissa Ruiz                                              */
/*    Created:      9/20/2024, 11:47:40 AM                                    */
/*    Description:  V5 project                                                */
/*                                                                            */
/*----------------------------------------------------------------------------*/
//Prueba 1
#include "vex.h"

using namespace vex;

// Configuración del cerebro, motor y sensor de visión
brain Brain;                
controller Controller1;
// Motores del lado izquierdo (puertos 1-4)
motor MotorL1(PORT14, true); 
motor MotorL2(PORT18, false);
motor MotorL3(PORT19, false);
motor MotorL4(PORT20, true);
motor_group Left(MotorL1, MotorL2, MotorL3, MotorL4);

// Motores del lado derecho (puertos 7-10)
motor MotorR1(PORT7, false);
motor MotorR2(PORT8, true);
motor MotorR3(PORT9, true);
motor MotorR4(PORT10, false);
motor_group Right(MotorR1, MotorR2, MotorR3, MotorR4);

// Motor para el sistema de recolección
motor Recolector(PORT1 , true);
motor Rampa(PORT12, true);
motor Garra(PORT15, true);

vex::pneumatics Pinza(Brain.ThreeWirePort.A);

vex::inertial Inercial(PORT11); 


const double WHEEL_DIAMETER = 4.0; // Diámetro de las ruedas en pulgadas
const double WHEEL_CIRCUMFERENCE = WHEEL_DIAMETER * M_PI;
const double TRACK_WIDTH = 15.5; // Ancho del robot entre las ruedas (pulgadas)

// Función para inicializar el sensor inercial
void initializeInertialSensor() {
    Brain.Screen.print("Calibrating Inertial Sensor...");
    Inercial.calibrate();
    while (Inercial.isCalibrating()) {
        wait(100, msec); // Espera hasta que se complete la calibración
    }
    Brain.Screen.clearScreen();
    Brain.Screen.print("Inertial Sensor Calibrated");
}

// Función para mostrar datos del sensor inercial
void displayInertialData() {
    double heading = Inercial.heading(); // Ángulo de orientación (0-360°)
    double rotation = Inercial.rotation(); // Rotación acumulativa (puede ser > 360° o < 0°)
    double pitch = Inercial.pitch(); // Inclinación hacia adelante/atrás
    double roll = Inercial.roll(); // Inclinación lateral
    double yaw = Inercial.yaw(); // Rotación alrededor del eje vertical

    Brain.Screen.clearScreen();
    Brain.Screen.setCursor(1, 1);
    Brain.Screen.print("Heading: %.2f deg", heading);
    Brain.Screen.newLine();
    Brain.Screen.print("Rotation: %.2f deg", rotation);
    Brain.Screen.newLine();
    Brain.Screen.print("Pitch: %.2f deg", pitch);
    Brain.Screen.newLine();
    Brain.Screen.print("Roll: %.2f deg", roll);
    Brain.Screen.newLine();
    Brain.Screen.print("Yaw: %.2f deg", yaw);
}

// Función para mover el robot con corrección de orientación
void moveStraightWithCorrection(double distanceInInches, double speed) {
    double targetRotations = (distanceInInches / WHEEL_CIRCUMFERENCE) * 360;
    double initialHeading = Inercial.heading();

    Left.spin(forward, speed, percent);
    Right.spin(forward, speed, percent);

    while (fabs(Left.position(rotationUnits::deg)) < targetRotations) {
        double currentHeading = Inercial.heading();
        double headingError = currentHeading - initialHeading;

        // Corrige el rumbo ajustando las velocidades
        Left.spin(forward, speed - headingError * 0.5, percent);
        Right.spin(forward, speed + headingError * 0.5, percent);
        task::sleep(10);
    }
    Left.stop();
    Right.stop();
}

// Programa principal
int main() {
    // Inicialización
    initializeInertialSensor();

    while (true) {
        // Muestra los datos del sensor inercial en la pantalla
        displayInertialData();
        wait(500, msec); // Actualiza cada 500 ms
        Left.stop(); 
        Right.stop(); 
        moveStraightWithCorrection(24, 100); 
    return 0;
    }
}

//Prueba 2
#include "vex.h"
using namespace vex;

const double WHEEL_DIAMETER = 4.0;
const double WHEEL_CIRCUMFERENCE = WHEEL_DIAMETER * M_PI;
const double TRACK_WIDTH = 15.5;
const double RELATIVE_DISTANCE_ERROR = 0.4445;

// Configuración del robot
brain Brain;
controller Controller1;
inertial Inercial(PORT11);

// Motores del lado izquierdo
motor MotorL1(PORT14, true); 
motor MotorL2(PORT18, false);
motor MotorL3(PORT19, false);
motor MotorL4(PORT20, true);

// Motores del lado derecho
motor MotorR1(PORT7, false);
motor MotorR2(PORT8, true);
motor MotorR3(PORT9, true);
motor MotorR4(PORT10, false);

// Motor para el sistema de recolección
motor Recolector(PORT1 , true);
motor Rampa(PORT12, true);
motor Garra(PORT15, true);

// Neumáticos
vex::pneumatics Pinza(Brain.ThreeWirePort.A);
vex::pneumatics RecolectorNeumatica(Brain.ThreeWirePort.B);

void resetEncoders() {
    MotorL1.setPosition(0, rotationUnits::deg);
    MotorL2.setPosition(0, rotationUnits::deg);
    MotorL3.setPosition(0, rotationUnits::deg);
    MotorL4.setPosition(0, rotationUnits::deg);
    MotorR1.setPosition(0, rotationUnits::deg);
    MotorR2.setPosition(0, rotationUnits::deg);
    MotorR3.setPosition(0, rotationUnits::deg);
    MotorR4.setPosition(0, rotationUnits::deg);
}

void setLeftMotors(double speed) {
    MotorL1.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorL2.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorL3.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorL4.spin(directionType::fwd, speed, velocityUnits::pct);
}

void setRightMotors(double speed) {
    MotorR1.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorR2.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorR3.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorR4.spin(directionType::fwd, speed, velocityUnits::pct);
}

void stopAllMotors() {
    MotorL1.stop();
    MotorL2.stop();
    MotorL3.stop();
    MotorL4.stop();
    MotorR1.stop();
    MotorR2.stop();
    MotorR3.stop();
    MotorR4.stop();
    Recolector.stop();
    Rampa.stop();
    Garra.stop();
}

void moveDistance(double distanceInInches, double speed) {
    resetEncoders();

    distanceInInches = (1.0 - RELATIVE_DISTANCE_ERROR) * distanceInInches;
    double targetRotations = (distanceInInches / WHEEL_CIRCUMFERENCE) * 360;

    setLeftMotors(speed);
    setRightMotors(speed);

    while (fabs(MotorL1.position(rotationUnits::deg)) < targetRotations &&
           fabs(MotorR1.position(rotationUnits::deg)) < targetRotations) {
        task::sleep(10);
    }
    stopAllMotors();
}

void turnInPlace(double targetDegrees, double speed) {
    // Reiniciar el sensor de inercia
    Inercial.resetRotation();

    // Esperar a que el sensor se reinicie completamente
    while (Inercial.isCalibrating()) {
        wait(100, msec);
    }

    // Determinar el sentido de giro (positivo para derecha, negativo para izquierda)
    double direction = targetDegrees > 0 ? 1.0 : -1.0;

    speed = speed*direction; 

    // Configurar los motores para girar
    setLeftMotors(speed); 
    setRightMotors(-speed); 

    // Bucle para ajustar el giro
    while (fabs(Inercial.rotation(degrees)) < fabs(targetDegrees)) {
        wait(10, msec);
    }

    // Detener los motores al alcanzar el ángulo deseado
    stopAllMotors(); 
}


void moveWithInertial(double distanceInInches, double speed) {
    resetEncoders();

    distanceInInches = (1.0 - RELATIVE_DISTANCE_ERROR) * distanceInInches;
    double targetRotations = (distanceInInches / WHEEL_CIRCUMFERENCE) * 360;

    double initialAngle = Inercial.rotation(degrees);

    setLeftMotors(speed);
    setRightMotors(speed);

    while (fabs(MotorL1.position(rotationUnits::deg)) < targetRotations &&
           fabs(MotorR1.position(rotationUnits::deg)) < targetRotations) {
        double currentAngle = Inercial.rotation(degrees);
        double correction = (currentAngle - initialAngle) * 0.5; // Factor de corrección
        setLeftMotors(speed - correction);
        setRightMotors(speed + correction);

        task::sleep(10);
    }
    stopAllMotors();
}

int main() {
    // Calibrar el sensor de inercia
    Inercial.calibrate(0);
    while (Inercial.isCalibrating()) {
        task::sleep(100);
    }

    // Ejemplo de uso con el sensor de inercia
    moveWithInertial(40, 100);      // Mover 24 pulgadas recto
    turnInPlace(90, 100);        // Rotar 90 grados en sentido horario
    turnInPlace(-90, 100); 
    moveWithInertial(36, 100);     // Mover 36 pulgadas recto

    return 0;
}

//Tercera Prueba 

/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       Melissa Ruiz                                              */
/*    Created:      9/20/2024, 11:47:40 AM                                    */
/*    Description:  V5 project                                                */
/*                                                                            */
/*----------------------------------------------------------------------------*/

#include "vex.h"
using namespace vex;

const double WHEEL_DIAMETER = 4.0;
const double WHEEL_CIRCUMFERENCE = WHEEL_DIAMETER * M_PI;
const double TRACK_WIDTH = 15.5;
const double RELATIVE_DISTANCE_ERROR = 0.4445;

// Configuración del robot
brain Brain;
controller Controller1;
inertial Inercial(PORT11);

// Motores del lado izquierdo
motor MotorL1(PORT14, true); 
motor MotorL2(PORT18, false);
motor MotorL3(PORT19, false);
motor MotorL4(PORT20, true);

// Motores del lado derecho
motor MotorR1(PORT7, false);
motor MotorR2(PORT8, true);
motor MotorR3(PORT9, true);
motor MotorR4(PORT10, false);

// Motor para el sistema de recolección
motor Recolector(PORT1 , true);
motor Rampa(PORT12, true);
motor Garra(PORT15, true);

// Neumáticos
vex::pneumatics Pinza(Brain.ThreeWirePort.A);
vex::pneumatics RecolectorNeumatica(Brain.ThreeWirePort.B);

void resetEncoders() {
    MotorL1.setPosition(0, rotationUnits::deg);
    MotorL2.setPosition(0, rotationUnits::deg);
    MotorL3.setPosition(0, rotationUnits::deg);
    MotorL4.setPosition(0, rotationUnits::deg);
    MotorR1.setPosition(0, rotationUnits::deg);
    MotorR2.setPosition(0, rotationUnits::deg);
    MotorR3.setPosition(0, rotationUnits::deg);
    MotorR4.setPosition(0, rotationUnits::deg);
}

void setLeftMotors(double speed) {
    MotorL1.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorL2.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorL3.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorL4.spin(directionType::fwd, speed, velocityUnits::pct);
}

void setRightMotors(double speed) {
    MotorR1.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorR2.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorR3.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorR4.spin(directionType::fwd, speed, velocityUnits::pct);
}

void stopAllMotors() {
    MotorL1.stop();
    MotorL2.stop();
    MotorL3.stop();
    MotorL4.stop();
    MotorR1.stop();
    MotorR2.stop();
    MotorR3.stop();
    MotorR4.stop();
    Recolector.stop();
    Rampa.stop();
    Garra.stop();
}

void moveWithInertial(double distanceInInches, double speed) {
    resetEncoders();

    distanceInInches = (1.0 - RELATIVE_DISTANCE_ERROR) * distanceInInches;
    double targetRotations = (distanceInInches / WHEEL_CIRCUMFERENCE) * 360;

    double initialAngle = Inercial.rotation(degrees);

    setLeftMotors(speed);
    setRightMotors(speed);

    while (fabs(MotorL1.position(rotationUnits::deg)) < targetRotations &&
           fabs(MotorR1.position(rotationUnits::deg)) < targetRotations) {
        double currentAngle = Inercial.rotation(degrees);
        double correction = (currentAngle - initialAngle) * 0.5; // Factor de corrección
        setLeftMotors(speed - correction);
        setRightMotors(speed + correction);

        task::sleep(10);
    }
    stopAllMotors();
}


void moveWithInertialReco(double distanceInInches, double speed) {
    resetEncoders();

    Recolector.spin(reverse, speed, percent);
    Rampa.spin(reverse, speed, percent);
    RecolectorNeumatica.close();

    distanceInInches = (1.0 - RELATIVE_DISTANCE_ERROR) * distanceInInches;
    double targetRotations = (distanceInInches / WHEEL_CIRCUMFERENCE) * 360;

    double initialAngle = Inercial.rotation(degrees);

    setLeftMotors(speed);
    setRightMotors(speed);

    while (fabs(MotorL1.position(rotationUnits::deg)) < targetRotations &&
           fabs(MotorR1.position(rotationUnits::deg)) < targetRotations) {
        double currentAngle = Inercial.rotation(degrees);
        double correction = (currentAngle - initialAngle) * 0.5; // Factor de corrección
        setLeftMotors(speed - correction);
        setRightMotors(speed + correction);

        task::sleep(10);
    }
    stopAllMotors();
}


void turnInPlace(double targetDegrees, double speed) {
    // Reiniciar el sensor de inercia
    Inercial.resetRotation();

    // Esperar a que el sensor se reinicie completamente
    while (Inercial.isCalibrating()) {
        wait(100, msec);
    }

    // Determinar el sentido de giro (positivo para derecha, negativo para izquierda)
    double direction = targetDegrees > 0 ? 1.0 : -1.0;

    speed = speed*direction; 

    // Configurar los motores para girar
    setLeftMotors(speed); 
    setRightMotors(-speed); 

    // Bucle para ajustar el giro
    while (fabs(Inercial.rotation(degrees)) < fabs(targetDegrees)) {
        wait(10, msec);
    }

    // Detener los motores al alcanzar el ángulo deseado
    stopAllMotors(); 
}




void displayInertialData() {
    double heading = Inercial.heading(); // Ángulo de orientación (0-360°)
    double rotation = Inercial.rotation(); // Rotación acumulativa (puede ser > 360° o < 0°)
    double pitch = Inercial.pitch(); // Inclinación hacia adelante/atrás
    double roll = Inercial.roll(); // Inclinación lateral
    double yaw = Inercial.yaw(); // Rotación alrededor del eje vertical

    Brain.Screen.clearScreen();
    Brain.Screen.setCursor(1, 1);
    Brain.Screen.print("Heading: %.2f deg", heading);
    Brain.Screen.newLine();
    Brain.Screen.print("Rotation: %.2f deg", rotation);
    Brain.Screen.newLine();
    Brain.Screen.print("Pitch: %.2f deg", pitch);
    Brain.Screen.newLine();
    Brain.Screen.print("Roll: %.2f deg", roll);
    Brain.Screen.newLine();
    Brain.Screen.print("Yaw: %.2f deg", yaw);
}

int main() {
    // Calibrar el sensor de inercia
    Inercial.calibrate(); 
    // Ejemplo de uso con el sensor de inercia
    moveWithInertial(40, 100);   // Mover 24 pulgadas recto
    turnInPlace(80, 100);        // Rotar 90 grados en sentido horario
    moveWithInertial(60, 100);   // Mover 36 pulgadas recto
    turnInPlace(80, 100);       //Rotar 90 gardo en sentido antihorario
    moveWithInertial(40, 100);
    turnInPlace(-100,100); 
    moveWithInertial(50, 100);
    turnInPlace(90, 50);
    return 0;
}
