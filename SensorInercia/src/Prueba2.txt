#include "vex.h"

using namespace vex;

// Configuración del cerebro, motor y sensor de visión
brain Brain;                
controller Controller1;
// Motores del lado izquierdo (puertos 1-4)
motor MotorL1(PORT14, true); 
motor MotorL2(PORT18, false);
motor MotorL3(PORT19, false);
motor MotorL4(PORT20, true);
motor_group Left(MotorL1, MotorL2, MotorL3, MotorL4);

// Motores del lado derecho (puertos 7-10)
motor MotorR1(PORT7, false);
motor MotorR2(PORT8, true);
motor MotorR3(PORT9, true);
motor MotorR4(PORT10, false);
motor_group Right(MotorR1, MotorR2, MotorR3, MotorR4);

// Motor para el sistema de recolección
motor Recolector(PORT1 , true);
motor Rampa(PORT12, true);
motor Garra(PORT15, true);

vex::pneumatics Pinza(Brain.ThreeWirePort.A);

vex::inertial Inercial(PORT11); 


const double WHEEL_DIAMETER = 4.0; // Diámetro de las ruedas en pulgadas
const double WHEEL_CIRCUMFERENCE = WHEEL_DIAMETER * M_PI;
const double TRACK_WIDTH = 15.5; // Ancho del robot entre las ruedas (pulgadas)

// Función para inicializar el sensor inercial
void initializeInertialSensor() {
    Brain.Screen.print("Calibrating Inertial Sensor...");
    Inercial.calibrate();
    while (Inercial.isCalibrating()) {
        wait(100, msec); // Espera hasta que se complete la calibración
    }
    Brain.Screen.clearScreen();
    Brain.Screen.print("Inertial Sensor Calibrated");
}

// Función para mostrar datos del sensor inercial
void displayInertialData() {
    double heading = Inercial.heading(); // Ángulo de orientación (0-360°)
    double rotation = Inercial.rotation(); // Rotación acumulativa (puede ser > 360° o < 0°)
    double pitch = Inercial.pitch(); // Inclinación hacia adelante/atrás
    double roll = Inercial.roll(); // Inclinación lateral
    double yaw = Inercial.yaw(); // Rotación alrededor del eje vertical

    Brain.Screen.clearScreen();
    Brain.Screen.setCursor(1, 1);
    Brain.Screen.print("Heading: %.2f deg", heading);
    Brain.Screen.newLine();
    Brain.Screen.print("Rotation: %.2f deg", rotation);
    Brain.Screen.newLine();
    Brain.Screen.print("Pitch: %.2f deg", pitch);
    Brain.Screen.newLine();
    Brain.Screen.print("Roll: %.2f deg", roll);
    Brain.Screen.newLine();
    Brain.Screen.print("Yaw: %.2f deg", yaw);
}

// Función para mover el robot con corrección de orientación
void moveStraightWithCorrection(double distanceInInches, double speed) {
    double targetRotations = (distanceInInches / WHEEL_CIRCUMFERENCE) * 360;
    double initialHeading = Inercial.heading();

    Left.spin(forward, speed, percent);
    Right.spin(forward, speed, percent);

    while (fabs(Left.position(rotationUnits::deg)) < targetRotations) {
        double currentHeading = Inercial.heading();
        double headingError = currentHeading - initialHeading;

        // Corrige el rumbo ajustando las velocidades
        Left.spin(forward, speed - headingError * 0.5, percent);
        Right.spin(forward, speed + headingError * 0.5, percent);
        task::sleep(10);
    }
    Left.stop();
    Right.stop();
}

// Programa principal
int main() {
    // Inicialización
    initializeInertialSensor();

    while (true) {
        // Muestra los datos del sensor inercial en la pantalla
        displayInertialData();
        wait(500, msec); // Actualiza cada 500 ms
        Left.stop(); 
        Right.stop(); 
        moveStraightWithCorrection(24, 100); 
    return 0;
    }
}
