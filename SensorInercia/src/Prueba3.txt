#include "vex.h"
using namespace vex;

const double WHEEL_DIAMETER = 4.0;
const double WHEEL_CIRCUMFERENCE = WHEEL_DIAMETER * M_PI;
const double TRACK_WIDTH = 15.5;
const double RELATIVE_DISTANCE_ERROR = 0.4445;

// Configuración del robot
brain Brain;
controller Controller1;
inertial Inercial(PORT11);

// Motores del lado izquierdo
motor MotorL1(PORT14, true); 
motor MotorL2(PORT18, false);
motor MotorL3(PORT19, false);
motor MotorL4(PORT20, true);

// Motores del lado derecho
motor MotorR1(PORT7, false);
motor MotorR2(PORT8, true);
motor MotorR3(PORT9, true);
motor MotorR4(PORT10, false);

// Motor para el sistema de recolección
motor Recolector(PORT1 , true);
motor Rampa(PORT12, true);
motor Garra(PORT15, true);

// Neumáticos
vex::pneumatics Pinza(Brain.ThreeWirePort.A);
vex::pneumatics RecolectorNeumatica(Brain.ThreeWirePort.B);

void resetEncoders() {
    MotorL1.setPosition(0, rotationUnits::deg);
    MotorL2.setPosition(0, rotationUnits::deg);
    MotorL3.setPosition(0, rotationUnits::deg);
    MotorL4.setPosition(0, rotationUnits::deg);
    MotorR1.setPosition(0, rotationUnits::deg);
    MotorR2.setPosition(0, rotationUnits::deg);
    MotorR3.setPosition(0, rotationUnits::deg);
    MotorR4.setPosition(0, rotationUnits::deg);
}

void setLeftMotors(double speed) {
    MotorL1.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorL2.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorL3.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorL4.spin(directionType::fwd, speed, velocityUnits::pct);
}

void setRightMotors(double speed) {
    MotorR1.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorR2.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorR3.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorR4.spin(directionType::fwd, speed, velocityUnits::pct);
}

void stopAllMotors() {
    MotorL1.stop();
    MotorL2.stop();
    MotorL3.stop();
    MotorL4.stop();
    MotorR1.stop();
    MotorR2.stop();
    MotorR3.stop();
    MotorR4.stop();
    Recolector.stop();
    Rampa.stop();
    Garra.stop();
}

void moveDistance(double distanceInInches, double speed) {
    resetEncoders();

    distanceInInches = (1.0 - RELATIVE_DISTANCE_ERROR) * distanceInInches;
    double targetRotations = (distanceInInches / WHEEL_CIRCUMFERENCE) * 360;

    setLeftMotors(speed);
    setRightMotors(speed);

    while (fabs(MotorL1.position(rotationUnits::deg)) < targetRotations &&
           fabs(MotorR1.position(rotationUnits::deg)) < targetRotations) {
        task::sleep(10);
    }
    stopAllMotors();
}

void turnInPlace(double targetDegrees, double speed) {
    // Reiniciar el sensor de inercia
    Inercial.resetRotation();

    // Esperar a que el sensor se reinicie completamente
    while (Inercial.isCalibrating()) {
        wait(100, msec);
    }

    // Determinar el sentido de giro (positivo para derecha, negativo para izquierda)
    double direction = targetDegrees > 0 ? 1.0 : -1.0;

    speed = speed*direction; 

    // Configurar los motores para girar
    setLeftMotors(speed); 
    setRightMotors(-speed); 

    // Bucle para ajustar el giro
    while (fabs(Inercial.rotation(degrees)) < fabs(targetDegrees)) {
        wait(10, msec);
    }

    // Detener los motores al alcanzar el ángulo deseado
    stopAllMotors(); 
}


void moveWithInertial(double distanceInInches, double speed) {
    resetEncoders();

    distanceInInches = (1.0 - RELATIVE_DISTANCE_ERROR) * distanceInInches;
    double targetRotations = (distanceInInches / WHEEL_CIRCUMFERENCE) * 360;

    double initialAngle = Inercial.rotation(degrees);

    setLeftMotors(speed);
    setRightMotors(speed);

    while (fabs(MotorL1.position(rotationUnits::deg)) < targetRotations &&
           fabs(MotorR1.position(rotationUnits::deg)) < targetRotations) {
        double currentAngle = Inercial.rotation(degrees);
        double correction = (currentAngle - initialAngle) * 0.5; // Factor de corrección
        setLeftMotors(speed - correction);
        setRightMotors(speed + correction);

        task::sleep(10);
    }
    stopAllMotors();
}

int main() {
    // Calibrar el sensor de inercia
    Inercial.calibrate(0);
    while (Inercial.isCalibrating()) {
        task::sleep(100);
    }

    // Ejemplo de uso con el sensor de inercia
    moveWithInertial(40, 100);      // Mover 24 pulgadas recto
    turnInPlace(90, 100);        // Rotar 90 grados en sentido horario
    turnInPlace(-90, 100); 
    moveWithInertial(36, 100);     // Mover 36 pulgadas recto

    return 0;
}