#include "vex.h"

using namespace vex;

const double WHEEL_DIAMETER = 4.0;  // Diámetro de las ruedas en pulgadas
const double WHEEL_CIRCUMFERENCE = WHEEL_DIAMETER * M_PI;  // Circunferencia de la rueda
const double TRACK_WIDTH = 15.5;  // Ancho del robot entre las ruedas (pulgadas)
const double RELATIVE_DISTANCE_ERROR = 0.4445;  // Error relativo en la distancia

// Configuración del robot
brain Brain;
controller Controller1;
gps GPS_SENSOR(PORT13);  // GPS en el puerto 11

// Motores del lado izquierdo
motor MotorL1(PORT14, true); 
motor MotorL2(PORT18, false);
motor MotorL3(PORT19, false);
motor MotorL4(PORT20, true);

// Motores del lado derecho
motor MotorR1(PORT7, false);
motor MotorR2(PORT8, true);
motor MotorR3(PORT9, true);
motor MotorR4(PORT10, false);

// Motor para el sistema de recolección
motor Recolector(PORT1 , true);
motor Rampa(PORT12, true);
motor Garra(PORT15, true);

// Neumáticos
vex::pneumatics Pinza(Brain.ThreeWirePort.A);
vex::pneumatics RecolectorNeumatica(Brain.ThreeWirePort.B);

void resetEncoders() {
    MotorL1.setPosition(0, rotationUnits::deg);
    MotorL2.setPosition(0, rotationUnits::deg);
    MotorL3.setPosition(0, rotationUnits::deg);
    MotorL4.setPosition(0, rotationUnits::deg);
    MotorR1.setPosition(0, rotationUnits::deg);
    MotorR2.setPosition(0, rotationUnits::deg);
    MotorR3.setPosition(0, rotationUnits::deg);
    MotorR4.setPosition(0, rotationUnits::deg);
}

void setLeftMotors(double speed) {
    MotorL1.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorL2.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorL3.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorL4.spin(directionType::fwd, speed, velocityUnits::pct);
}

void setRightMotors(double speed) {
    MotorR1.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorR2.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorR3.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorR4.spin(directionType::fwd, speed, velocityUnits::pct);
}

void stopAllMotors() {
    MotorL1.stop();
    MotorL2.stop();
    MotorL3.stop();
    MotorL4.stop();
    MotorR1.stop();
    MotorR2.stop();
    MotorR3.stop();
    MotorR4.stop();
    Recolector.stop();
    Rampa.stop();
    Garra.stop();
}

void moveWithGPS(double distanceInInches, double speed) {
    resetEncoders();

    distanceInInches = (1.0 - RELATIVE_DISTANCE_ERROR) * distanceInInches;
    double targetRotations = (distanceInInches / WHEEL_CIRCUMFERENCE) * 360;

    // Obtener las coordenadas iniciales del GPS
    double initialX = GPS_SENSOR.xPosition();
    double initialY = GPS_SENSOR.yPosition();

    setLeftMotors(speed);
    setRightMotors(speed);

    while (fabs(MotorL1.position(rotationUnits::deg)) < targetRotations &&
           fabs(MotorR1.position(rotationUnits::deg)) < targetRotations) {

        // Obtener las coordenadas actuales del GPS
        double currentX = GPS_SENSOR.xPosition();
        double currentY = GPS_SENSOR.yPosition();

        // Calcular la diferencia de posición para determinar si el robot sigue una línea recta
        double deltaX = currentX - initialX;
        double deltaY = currentY - initialY;

        // Corregir el movimiento basado en la diferencia en las coordenadas
        if (fabs(deltaX) > 1.0) { // Si hay una desviación significativa en X
            setLeftMotors(speed - 5);  // Ajustar velocidad de los motores izquierdo
            setRightMotors(speed + 5);  // Ajustar velocidad de los motores derecho
        } else if (fabs(deltaY) > 1.0) { // Si hay una desviación significativa en Y
            setLeftMotors(speed + 5);
            setRightMotors(speed - 5);
        }

        task::sleep(10);
    }
    stopAllMotors();
}

void turnWithGPS(double targetAngle, double speed) {
    // Obtener la orientación inicial del robot
    double initialAngle = GPS_SENSOR.heading();  // Obtiene la dirección del robot en grados

    speed = (targetAngle > 0) ? speed : -speed;

    setLeftMotors(speed);
    setRightMotors(-speed);

    while (fabs(GPS_SENSOR.heading() - initialAngle) < fabs(targetAngle)) {
        task::sleep(10);
    }

    stopAllMotors();
}

int main() {
    // Esperar a que el GPS esté completamente calibrado
    while (!GPS_SENSOR.isCalibrating()) {
        task::sleep(100);
    }

    // Ejemplo de uso con GPS
    moveWithGPS(40, 100);      // Mover 40 pulgadas recto
    turnWithGPS(90, 100);      // Girar 90 grados en sentido horario
    turnWithGPS(-90, 100);     // Girar 90 grados en sentido antihorario
    moveWithGPS(36, 100);      // Mover 36 pulgadas recto

    return 0;
}
