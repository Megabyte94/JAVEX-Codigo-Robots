//Distancia e Inercia

#include "vex.h"
using namespace vex;

// Constantes
const double STOP_DISTANCE = 50.0; // Distancia en mm para detenerse
const double SPEED = 50.0;         // Velocidad del robot en %
const double TURN_SPEED = 30.0;    // Velocidad para el giro en %
const double TURN_DEGREES = 90.0;  // Grados para el giro sobre su eje

brain Brain;
controller Controller1;
distance DistSensor(PORT16); // Sensor de distancia conectado al puerto 2
inertial Inercial(PORT11);  // Sensor de inercia conectado al puerto 11

// Motores del lado izquierdo
motor MotorL1(PORT14, true); 
motor MotorL2(PORT18, false);
motor MotorL3(PORT19, false);
motor MotorL4(PORT20, true);

// Motores del lado derecho
motor MotorR1(PORT7, false);
motor MotorR2(PORT8, true);
motor MotorR3(PORT9, true);
motor MotorR4(PORT10, false);

// Funciones auxiliares
void setLeftMotors(double speed) {
    MotorL1.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorL2.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorL3.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorL4.spin(directionType::fwd, speed, velocityUnits::pct);
}

void setRightMotors(double speed) {
    MotorR1.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorR2.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorR3.spin(directionType::fwd, speed, velocityUnits::pct);
    MotorR4.spin(directionType::fwd, speed, velocityUnits::pct);
}

void stopAllMotors() {
    MotorL1.stop();
    MotorL2.stop();
    MotorL3.stop();
    MotorL4.stop();
    MotorR1.stop();
    MotorR2.stop();
    MotorR3.stop();
    MotorR4.stop();
}

void resetInertialSensor() {
    Inercial.resetRotation();
    while (Inercial.isCalibrating()) {
        Brain.Screen.print("Calibrating Inertial Sensor...");
        wait(100, msec);
    }
    Brain.Screen.clearScreen();
}

// Función para girar sobre su propio eje
void turnOnAxis(double degrees) {
    resetInertialSensor();
    Brain.Screen.print("Turning %.2f degrees", degrees);

    if (degrees > 0) {
        // Giro hacia la derecha
        setLeftMotors(TURN_SPEED);
        setRightMotors(-TURN_SPEED);
    } else {
        // Giro hacia la izquierda
        setLeftMotors(-TURN_SPEED);
        setRightMotors(TURN_SPEED);
    }

    while (fabs(Inercial.rotation()) < fabs(degrees)) {
        Brain.Screen.clearLine();
        Brain.Screen.print("Current Rotation: %.2f", Inercial.rotation());
        wait(10, msec);
    }

    stopAllMotors();
    Brain.Screen.newLine();
    Brain.Screen.print("Turn complete.");
}

// Función para avanzar hasta detectar un objeto
void moveUntilObjectDetected() {
    Brain.Screen.clearScreen();
    Brain.Screen.print("Moving forward...");

    while (true) {
        double distance = DistSensor.objectDistance(mm); // Leer distancia en mm

        // Mostrar la distancia en la pantalla del cerebro
        Brain.Screen.clearLine();
        Brain.Screen.print("Distance: %.2f mm", distance);

        // Si detecta un objeto dentro de la distancia límite, detenerse
        if (distance <= STOP_DISTANCE && distance > 0) {
            stopAllMotors();
            Brain.Screen.newLine();
            Brain.Screen.print("Object detected at %.2f mm", distance);
            break;
        } else {
            // Continuar moviéndose hacia adelante
            setLeftMotors(SPEED);
            setRightMotors(SPEED);
        }

        wait(100, msec); // Pequeño retraso para evitar lecturas excesivas
    }
}

// Programa principal
int main() {
    // Inicialización
    Brain.Screen.clearScreen();
    Brain.Screen.print("Initializing...");
    wait(2, seconds);

    // Comenzar recorrido
    moveUntilObjectDetected();
    turnOnAxis(TURN_DEGREES); 
    moveUntilObjectDetected(); 


    // Indicar que se completó la acción
    Brain.Screen.newLine();
    Brain.Screen.print("Task complete.");

    return 0;
}
